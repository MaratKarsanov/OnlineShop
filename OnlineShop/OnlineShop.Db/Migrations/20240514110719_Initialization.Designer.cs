// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShop.Db;

#nullable disable

namespace OnlineShop.Db.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240514110719_Initialization")]
    partial class Initialization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Comparison", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comparisons");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.DeliveryData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryData");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Favourites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeliveryDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryDataId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComparisonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FavouritesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInComparison")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInFavourites")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComparisonId");

                    b.HasIndex("FavouritesId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13c00883-e3c7-4ee4-83c4-e43ab97e6f57"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaCeylonTea.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea Ceylon"
                        },
                        new
                        {
                            Id = new Guid("f6d0a154-e167-4bab-8f1a-26055f2d5cfd"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaClassicGrey.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea Classic Grey"
                        },
                        new
                        {
                            Id = new Guid("1c99c083-39ab-4115-94ab-c89a49ba6382"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaClassikBlackTea.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea Classic Black"
                        },
                        new
                        {
                            Id = new Guid("2baee684-8e22-4cd1-8f17-60c81082716a"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaEnglishBreakfast.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea English Breakfast"
                        },
                        new
                        {
                            Id = new Guid("13aca13d-22f7-41ff-ad29-77bc13da813a"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaLondonAfternoon.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea London Afternoon"
                        },
                        new
                        {
                            Id = new Guid("ffa4fc54-34a2-47b8-8b5b-008a0247921b"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaPearStrudel.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea Pear Strudel"
                        },
                        new
                        {
                            Id = new Guid("f30fdd14-d6e8-46cb-a5cd-8767f13449c2"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaStrawberryMousse.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea Strawberry Mousse"
                        },
                        new
                        {
                            Id = new Guid("8ee912ff-020b-415f-9e1a-38b66c651f3e"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/azer.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Azer Tea"
                        },
                        new
                        {
                            Id = new Guid("5e701a10-0638-434f-bcd0-dffe27988d7f"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/curtisIsabellaGrape.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Curtis Isabella Grape"
                        },
                        new
                        {
                            Id = new Guid("74a7787d-6c06-40c0-8571-682c914f662b"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/curtisSummerBerries.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Curtis Summer Berries"
                        },
                        new
                        {
                            Id = new Guid("e38dea82-a635-446c-bef7-f88891e7ad30"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/curtisSunnyLemon.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Curtis Sunny Lemon"
                        },
                        new
                        {
                            Id = new Guid("c1dfc863-e553-4e3c-afaf-e83bf714affb"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/curtisWhiteBountea.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Curtis White Bountea"
                        },
                        new
                        {
                            Id = new Guid("6bdf217c-d72a-480c-bb97-1cde95028db4"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/tessBerryBar.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Tess Berry Bar"
                        },
                        new
                        {
                            Id = new Guid("eda18f5f-3762-4dfc-aa8b-6e56600e5c0a"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/tessDark.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Tess Dark"
                        },
                        new
                        {
                            Id = new Guid("8a6a5859-542a-4186-aea6-7f86cac19e54"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/tessFlirt.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Tess Flirt"
                        },
                        new
                        {
                            Id = new Guid("4ebd2235-6413-4ce3-a8fe-11e1c27e607e"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/tessForestDream.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Tess Forest Dream"
                        });
                });

            modelBuilder.Entity("OnlineShop.Db.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineShop.Db.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineShop.Db.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.Db.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineShop.Db.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShop.Db.Models.CartItem", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Cart", null)
                        .WithMany("Items")
                        .HasForeignKey("CartId");

                    b.HasOne("OnlineShop.Db.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId");

                    b.HasOne("OnlineShop.Db.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.DeliveryData", b =>
                {
                    b.HasOne("OnlineShop.Db.User", null)
                        .WithMany("DeliveryDatas")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.DeliveryData", "DeliveryData")
                        .WithMany()
                        .HasForeignKey("DeliveryDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryData");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Product", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Comparison", null)
                        .WithMany("Items")
                        .HasForeignKey("ComparisonId");

                    b.HasOne("OnlineShop.Db.Models.Favourites", null)
                        .WithMany("Items")
                        .HasForeignKey("FavouritesId");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Comparison", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Favourites", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.User", b =>
                {
                    b.Navigation("DeliveryDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
