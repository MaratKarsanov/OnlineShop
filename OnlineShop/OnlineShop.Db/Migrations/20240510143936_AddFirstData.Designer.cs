// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShop.Db;

#nullable disable

namespace OnlineShop.Db.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240510143936_AddFirstData")]
    partial class AddFirstData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineShop.Db.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Comparison", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comparisons");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.DeliveryData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLogin")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserLogin");

                    b.ToTable("DeliveryData");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Favourites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeliveryDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryDataId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComparisonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FavouritesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInComparison")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInFavourites")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComparisonId");

                    b.HasIndex("FavouritesId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f94f1dc-887d-451f-a9fd-56a0d4e7e374"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaCeylonTea.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea Ceylon"
                        },
                        new
                        {
                            Id = new Guid("022d0a79-f8cb-44a5-9709-124359512159"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaClassicGrey.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea Classic Grey"
                        },
                        new
                        {
                            Id = new Guid("c1b61939-ca84-4a14-a698-0946540612a0"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaClassikBlackTea.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea Classic Black"
                        },
                        new
                        {
                            Id = new Guid("d054d31e-5b33-4447-b7af-46dc26c74572"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaEnglishBreakfast.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea English Breakfast"
                        },
                        new
                        {
                            Id = new Guid("270684d3-4d4f-4652-b59b-f87fd58a8297"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaLondonAfternoon.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea London Afternoon"
                        },
                        new
                        {
                            Id = new Guid("f25f268a-b0e9-40cc-989d-4e186592a469"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaPearStrudel.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea Pear Strudel"
                        },
                        new
                        {
                            Id = new Guid("a7b663b9-0132-45ff-96eb-bcab037c9190"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/ahmadTeaStrawberryMousse.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Ahmad Tea Strawberry Mousse"
                        },
                        new
                        {
                            Id = new Guid("7795c6d9-9a8b-4c36-9c42-99f73d79871c"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/azer.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Azer Tea"
                        },
                        new
                        {
                            Id = new Guid("d579d880-9616-4e06-8249-62f6c482ad1d"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/curtisIsabellaGrape.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Curtis Isabella Grape"
                        },
                        new
                        {
                            Id = new Guid("18b7172c-26f6-43c5-af1c-289615e4e82a"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/curtisSummerBerries.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Curtis Summer Berries"
                        },
                        new
                        {
                            Id = new Guid("1c94fbd2-aa6e-40fe-955c-444f94d119a7"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/curtisSunnyLemon.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Curtis Sunny Lemon"
                        },
                        new
                        {
                            Id = new Guid("0e523662-9c79-4121-82e9-e5fcac260d9b"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/curtisWhiteBountea.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Curtis White Bountea"
                        },
                        new
                        {
                            Id = new Guid("d777d305-279e-4e99-8a5f-c0155019a08f"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/tessBerryBar.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Tess Berry Bar"
                        },
                        new
                        {
                            Id = new Guid("b8744ed8-31c0-40b0-b988-7f1578cbc4b3"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/tessDark.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Tess Dark"
                        },
                        new
                        {
                            Id = new Guid("13bb4596-526b-4e4b-a083-086fba4784bf"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/tessFlirt.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Tess Flirt"
                        },
                        new
                        {
                            Id = new Guid("34a03e74-090b-4699-85d5-cc212e4597ca"),
                            Cost = 500m,
                            Description = "Очень вкусный и ароматный чай",
                            ImageLink = "/images/teas/tessForestDream.png",
                            IsInComparison = false,
                            IsInFavourites = false,
                            Name = "Tess Forest Dream"
                        });
                });

            modelBuilder.Entity("OnlineShop.Db.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Name = "Administrator"
                        },
                        new
                        {
                            Name = "User"
                        });
                });

            modelBuilder.Entity("OnlineShop.Db.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Login");

                    b.HasIndex("RoleName");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Login = "karsanov@mail.ru",
                            Address = "Vatutina 37",
                            Name = "Marat",
                            Password = "marmar",
                            PhoneNumber = "89187080533",
                            RememberMe = false,
                            RoleName = "Administrator",
                            Surname = "Karsanov"
                        });
                });

            modelBuilder.Entity("OnlineShop.Db.Models.CartItem", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Cart", null)
                        .WithMany("Items")
                        .HasForeignKey("CartId");

                    b.HasOne("OnlineShop.Db.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId");

                    b.HasOne("OnlineShop.Db.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.DeliveryData", b =>
                {
                    b.HasOne("OnlineShop.Db.User", null)
                        .WithMany("DeliveryDatas")
                        .HasForeignKey("UserLogin");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.DeliveryData", "DeliveryData")
                        .WithMany()
                        .HasForeignKey("DeliveryDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryData");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Product", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Comparison", null)
                        .WithMany("Items")
                        .HasForeignKey("ComparisonId");

                    b.HasOne("OnlineShop.Db.Models.Favourites", null)
                        .WithMany("Items")
                        .HasForeignKey("FavouritesId");
                });

            modelBuilder.Entity("OnlineShop.Db.User", b =>
                {
                    b.HasOne("OnlineShop.Db.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Comparison", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Favourites", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.User", b =>
                {
                    b.Navigation("DeliveryDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
